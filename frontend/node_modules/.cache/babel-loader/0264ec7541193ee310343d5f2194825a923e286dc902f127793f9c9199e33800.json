{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dashboard from \"views/Dashboard.js\";\nimport Notifications from \"views/Notifications.js\";\nimport Icons from \"views/Icons.js\";\nimport Typography from \"views/Typography.js\";\nimport TableList from \"views/Tables.js\";\nimport UserPage from \"views/User.js\";\nimport ManageCoursePage from \"views/ManageCoursePage.js\";\nimport BatchManager from \"views/BatchManager.js\";\nimport Courses from \"views/Courses\";\nimport Liveclass from \"views/Liveclass\";\nimport QandA from \"views/QandA\";\nimport UpgradeToPro from \"views/Upgrade.js\";\nconst getUserCategory = () => sessionStorage.getItem(\"email\");\nconst Routes = () => {\n  _s();\n  const [userType, setUserType] = useState(null);\n  useEffect(() => {\n    const fetchUserType = async () => {\n      try {\n        const userEmail = getUserCategory();\n        const response = await fetch(\"http://localhost:8000/api/userType?email=\".concat(userEmail));\n        const data = await response.json();\n        setUserType(data.userType);\n      } catch (error) {\n        console.error('Error fetching user type:', error);\n      }\n    };\n    fetchUserType();\n  }, []);\n  const userCategory = getUserCategory();\n  let routes = [];\n  if (userCategory === 'Student') {\n    routes = [{\n      path: \"/Liveclass\",\n      name: \"My Classes\",\n      icon: \"nc-icon nc-time-alarm\",\n      component: Liveclass,\n      layout: \"/admin\"\n    }, {\n      path: \"/Courses\",\n      name: \"My Courses\",\n      icon: \"nc-icon nc-single-copy-04\",\n      component: Courses,\n      layout: \"/admin\"\n    }, {\n      path: \"/QandA\",\n      name: \"Question and Answer\",\n      icon: \"nc-icon nc-bullet-list-67\",\n      component: QandA,\n      layout: \"/admin\"\n    }];\n  } else if (userCategory === 'admin') {\n    routes = [{\n      path: \"/upgrade\",\n      name: \"Manage Certification\",\n      icon: \"nc-icon nc-trophy\",\n      component: UpgradeToPro,\n      layout: \"/admin\"\n    }\n    // Other admin routes here...\n    ];\n  } else {\n    routes = [{\n      path: \"/dashboard\",\n      name: \"Dashboard\",\n      icon: \"nc-icon nc-chart-bar-32\",\n      component: Dashboard,\n      layout: \"/admin\"\n    }, {\n      path: \"/user-page\",\n      name: \"Profile\",\n      icon: \"nc-icon nc-bookmark-2\",\n      component: UserPage,\n      layout: \"/admin\"\n    }];\n  }\n  return routes;\n};\n_s(Routes, \"s7ECiS5Wa0NWDgpEJQNGzGPG6uY=\");\n_c = Routes;\nexport default Routes;\nvar _c;\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","Notifications","Icons","Typography","TableList","UserPage","ManageCoursePage","BatchManager","Courses","Liveclass","QandA","UpgradeToPro","getUserCategory","sessionStorage","getItem","Routes","_s","userType","setUserType","fetchUserType","userEmail","response","fetch","concat","data","json","error","console","userCategory","routes","path","name","icon","component","layout","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/LMS/frontend/src/routes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Dashboard from \"views/Dashboard.js\";\r\nimport Notifications from \"views/Notifications.js\";\r\nimport Icons from \"views/Icons.js\";\r\nimport Typography from \"views/Typography.js\";\r\nimport TableList from \"views/Tables.js\";\r\nimport UserPage from \"views/User.js\";\r\nimport ManageCoursePage from \"views/ManageCoursePage.js\";\r\nimport BatchManager from \"views/BatchManager.js\";\r\nimport Courses from \"views/Courses\";\r\nimport Liveclass from \"views/Liveclass\";\r\nimport QandA from \"views/QandA\";\r\nimport UpgradeToPro from \"views/Upgrade.js\";\r\n\r\nconst getUserCategory = () => sessionStorage.getItem(\"email\");\r\n\r\nconst Routes = () => {\r\n  const [userType, setUserType] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUserType = async () => {\r\n      try {\r\n        const userEmail = getUserCategory();\r\n        const response = await fetch(`http://localhost:8000/api/userType?email=${userEmail}`);\r\n        const data = await response.json();\r\n        setUserType(data.userType);\r\n      } catch (error) {\r\n        console.error('Error fetching user type:', error);\r\n      }\r\n    };\r\n    fetchUserType();\r\n  }, []);\r\n\r\n  const userCategory = getUserCategory();\r\n\r\n  let routes = [];\r\n\r\n  if (userCategory === 'Student') {\r\n    routes = [\r\n      {\r\n        path: \"/Liveclass\",\r\n        name: \"My Classes\",\r\n        icon: \"nc-icon nc-time-alarm\",\r\n        component: Liveclass,\r\n        layout: \"/admin\",\r\n      },\r\n      {\r\n        path: \"/Courses\",\r\n        name: \"My Courses\",\r\n        icon: \"nc-icon nc-single-copy-04\",\r\n        component: Courses,\r\n        layout: \"/admin\",\r\n      },\r\n      {\r\n        path: \"/QandA\",\r\n        name: \"Question and Answer\",\r\n        icon: \"nc-icon nc-bullet-list-67\",\r\n        component: QandA,\r\n        layout: \"/admin\",\r\n      },\r\n    ];\r\n  } else if (userCategory === 'admin') {\r\n    routes = [\r\n      {\r\n        path: \"/upgrade\",\r\n        name: \"Manage Certification\",\r\n        icon: \"nc-icon nc-trophy\",\r\n        component: UpgradeToPro,\r\n        layout: \"/admin\",\r\n      },\r\n      // Other admin routes here...\r\n    ];\r\n  } else {\r\n    routes = [\r\n      {\r\n        path: \"/dashboard\",\r\n        name: \"Dashboard\",\r\n        icon: \"nc-icon nc-chart-bar-32\",\r\n        component: Dashboard,\r\n        layout: \"/admin\",\r\n      },\r\n      {\r\n        path: \"/user-page\",\r\n        name: \"Profile\",\r\n        icon: \"nc-icon nc-bookmark-2\",\r\n        component: UserPage,\r\n        layout: \"/admin\",\r\n      },\r\n    ];\r\n  }\r\n\r\n  return routes;\r\n};\r\n\r\nexport default Routes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}