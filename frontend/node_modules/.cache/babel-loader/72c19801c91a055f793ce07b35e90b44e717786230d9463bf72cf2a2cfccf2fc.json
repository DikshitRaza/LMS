{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\LMS\\\\frontend\\\\src\\\\routes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom'; // assuming you're using React Router\nimport Dashboard from \"views/Dashboard.js\";\nimport Notifications from \"views/Notifications.js\";\nimport Icons from \"views/Icons.js\";\nimport Typography from \"views/Typography.js\";\nimport TableList from \"views/Tables.js\";\nimport UserPage from \"views/User.js\";\nimport ManageCoursePage from \"views/ManageCoursePage.js\";\nimport BatchManager from \"views/BatchManager.js\";\nimport Courses from \"views/Courses\";\nimport Liveclass from \"views/Liveclass\";\nimport QandA from \"views/QandA\";\nimport UpgradeToPro from \"views/Upgrade.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getUserCategory = () => sessionStorage.getItem(\"email\");\nconst Routes = () => {\n  _s();\n  const [userType, setUserType] = useState(null);\n  useEffect(() => {\n    const fetchUserType = async () => {\n      try {\n        const userEmail = getUserCategory();\n        const response = await fetch(\"http://localhost:8000/api/userType?email=\".concat(userEmail));\n        const data = await response.json();\n        setUserType(data.userType);\n      } catch (error) {\n        console.error('Error fetching user type:', error);\n      }\n    };\n    fetchUserType();\n  }, []);\n  const userCategory = getUserCategory();\n  let routes = [];\n  if (userCategory === 'Student') {\n    routes = [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/Liveclass\",\n      component: Liveclass\n    }, \"/Liveclass\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/Courses\",\n      component: Courses\n    }, \"/Courses\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/QandA\",\n      component: QandA\n    }, \"/QandA\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)];\n  } else if (userCategory === 'admin') {\n    routes = [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/upgrade\",\n      component: UpgradeToPro\n    }, \"/upgrade\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n    // Other admin routes here...\n    ];\n  } else {\n    routes = [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/dashboard\",\n      component: Dashboard\n    }, \"/dashboard\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/user-page\",\n      component: UserPage\n    }, \"/user-page\", false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)];\n  }\n  return routes;\n};\n_s(Routes, \"s7ECiS5Wa0NWDgpEJQNGzGPG6uY=\");\n_c = Routes;\nexport default Routes;\nvar _c;\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"names":["React","useState","useEffect","Route","Dashboard","Notifications","Icons","Typography","TableList","UserPage","ManageCoursePage","BatchManager","Courses","Liveclass","QandA","UpgradeToPro","jsxDEV","_jsxDEV","getUserCategory","sessionStorage","getItem","Routes","_s","userType","setUserType","fetchUserType","userEmail","response","fetch","concat","data","json","error","console","userCategory","routes","path","component","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/LMS/frontend/src/routes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Route } from 'react-router-dom'; // assuming you're using React Router\r\nimport Dashboard from \"views/Dashboard.js\";\r\nimport Notifications from \"views/Notifications.js\";\r\nimport Icons from \"views/Icons.js\";\r\nimport Typography from \"views/Typography.js\";\r\nimport TableList from \"views/Tables.js\";\r\nimport UserPage from \"views/User.js\";\r\nimport ManageCoursePage from \"views/ManageCoursePage.js\";\r\nimport BatchManager from \"views/BatchManager.js\";\r\nimport Courses from \"views/Courses\";\r\nimport Liveclass from \"views/Liveclass\";\r\nimport QandA from \"views/QandA\";\r\nimport UpgradeToPro from \"views/Upgrade.js\";\r\n\r\nconst getUserCategory = () => sessionStorage.getItem(\"email\");\r\n\r\nconst Routes = () => {\r\n  const [userType, setUserType] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const fetchUserType = async () => {\r\n      try {\r\n        const userEmail = getUserCategory();\r\n        const response = await fetch(`http://localhost:8000/api/userType?email=${userEmail}`);\r\n        const data = await response.json();\r\n        setUserType(data.userType);\r\n      } catch (error) {\r\n        console.error('Error fetching user type:', error);\r\n      }\r\n    };\r\n    fetchUserType();\r\n  }, []);\r\n\r\n  const userCategory = getUserCategory();\r\n\r\n  let routes = [];\r\n\r\n  if (userCategory === 'Student') {\r\n    routes = [\r\n      <Route key=\"/Liveclass\" path=\"/Liveclass\" component={Liveclass} />,\r\n      <Route key=\"/Courses\" path=\"/Courses\" component={Courses} />,\r\n      <Route key=\"/QandA\" path=\"/QandA\" component={QandA} />,\r\n    ];\r\n  } else if (userCategory === 'admin') {\r\n    routes = [\r\n      <Route key=\"/upgrade\" path=\"/upgrade\" component={UpgradeToPro} />,\r\n      // Other admin routes here...\r\n    ];\r\n  } else {\r\n    routes = [\r\n      <Route key=\"/dashboard\" path=\"/dashboard\" component={Dashboard} />,\r\n      <Route key=\"/user-page\" path=\"/user-page\" component={UserPage} />,\r\n    ];\r\n  }\r\n\r\n  return routes;\r\n};\r\n\r\nexport default Routes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}