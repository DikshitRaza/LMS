{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\LMS\\\\frontend\\\\src\\\\views\\\\BatchManager.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction BatchManager() {\n  _s();\n  const [subjects, setSubjects] = useState([]);\n  const [selectedSubject, setSelectedSubject] = useState('');\n  const [students, setStudents] = useState([]);\n  const [selectedStudents, setSelectedStudents] = useState([]);\n  const [batchID, setBatchID] = useState('');\n  useEffect(() => {\n    // Fetch subjects and students when component mounts\n    fetchSubjects();\n    fetchStudents();\n  }, []);\n  const fetchSubjects = () => {\n    // Simulated fetch of subjects from API\n    const subjectsData = ['Math', 'Science', 'History']; // Replace with actual API call\n    setSubjects(subjectsData);\n  };\n  const fetchStudents = () => {\n    // Simulated fetch of students from API\n    const studentsData = [{\n      id: 1,\n      name: 'Student 1'\n    }, {\n      id: 2,\n      name: 'Student 2'\n    }, {\n      id: 3,\n      name: 'Student 3'\n    }]; // Replace with actual API call\n    setStudents(studentsData);\n  };\n  const handleSubjectChange = event => {\n    setSelectedSubject(event.target.value);\n    // Generate batch ID (subjectName_random4DigitNumber)\n    const randomNum = Math.floor(1000 + Math.random() * 9000);\n    setBatchID(\"\".concat(event.target.value, \"_batch_\").concat(randomNum));\n  };\n  const handleCheckboxChange = studentID => {\n    const updatedStudents = selectedStudents.includes(studentID) ? selectedStudents.filter(id => id !== studentID) : [...selectedStudents, studentID];\n    setSelectedStudents(updatedStudents);\n  };\n  const handleSubmit = () => {\n    // Save batch data\n    const batchData = {\n      batchID,\n      subject: selectedSubject,\n      students: selectedStudents\n    };\n    console.log('Batch data:', batchData); // Replace with actual API call to save data\n    // Clear form after submission\n    setSelectedSubject('');\n    setSelectedStudents([]);\n    setBatchID('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add Batch\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"subject\",\n        children: \"Select Subject:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"subject\",\n        value: selectedSubject,\n        onChange: handleSubjectChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          children: \"Select\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), subjects.map(subject => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: subject,\n          children: subject\n        }, subject, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Selected Subject: \", selectedSubject]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Batch ID: \", batchID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Enroll Students:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), students.map(student => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: student.id,\n          checked: selectedStudents.includes(student.id),\n          onChange: () => handleCheckboxChange(student.id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: student.id,\n          children: student.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)]\n      }, student.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: !selectedSubject || selectedStudents.length === 0,\n        children: \"Add Batch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(BatchManager, \"19UpugCX1NEj01ipOMQxiBMBmyg=\");\n_c = BatchManager;\nexport default BatchManager;\nvar _c;\n$RefreshReg$(_c, \"BatchManager\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","BatchManager","_s","subjects","setSubjects","selectedSubject","setSelectedSubject","students","setStudents","selectedStudents","setSelectedStudents","batchID","setBatchID","fetchSubjects","fetchStudents","subjectsData","studentsData","id","name","handleSubjectChange","event","target","value","randomNum","Math","floor","random","concat","handleCheckboxChange","studentID","updatedStudents","includes","filter","handleSubmit","batchData","subject","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","onChange","map","student","type","checked","disabled","length","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/LMS/frontend/src/views/BatchManager.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nfunction BatchManager() {\r\n  const [subjects, setSubjects] = useState([]);\r\n  const [selectedSubject, setSelectedSubject] = useState('');\r\n  const [students, setStudents] = useState([]);\r\n  const [selectedStudents, setSelectedStudents] = useState([]);\r\n  const [batchID, setBatchID] = useState('');\r\n\r\n  useEffect(() => {\r\n    // Fetch subjects and students when component mounts\r\n    fetchSubjects();\r\n    fetchStudents();\r\n  }, []);\r\n\r\n  const fetchSubjects = () => {\r\n    // Simulated fetch of subjects from API\r\n    const subjectsData = ['Math', 'Science', 'History']; // Replace with actual API call\r\n    setSubjects(subjectsData);\r\n  };\r\n\r\n  const fetchStudents = () => {\r\n    // Simulated fetch of students from API\r\n    const studentsData = [\r\n      { id: 1, name: 'Student 1' },\r\n      { id: 2, name: 'Student 2' },\r\n      { id: 3, name: 'Student 3' }\r\n    ]; // Replace with actual API call\r\n    setStudents(studentsData);\r\n  };\r\n\r\n  const handleSubjectChange = (event) => {\r\n    setSelectedSubject(event.target.value);\r\n    // Generate batch ID (subjectName_random4DigitNumber)\r\n    const randomNum = Math.floor(1000 + Math.random() * 9000);\r\n    setBatchID(`${event.target.value}_batch_${randomNum}`);\r\n  };\r\n\r\n  const handleCheckboxChange = (studentID) => {\r\n    const updatedStudents = selectedStudents.includes(studentID)\r\n      ? selectedStudents.filter(id => id !== studentID)\r\n      : [...selectedStudents, studentID];\r\n    setSelectedStudents(updatedStudents);\r\n  };\r\n\r\n  const handleSubmit = () => {\r\n    // Save batch data\r\n    const batchData = {\r\n      batchID,\r\n      subject: selectedSubject,\r\n      students: selectedStudents\r\n    };\r\n    console.log('Batch data:', batchData); // Replace with actual API call to save data\r\n    // Clear form after submission\r\n    setSelectedSubject('');\r\n    setSelectedStudents([]);\r\n    setBatchID('');\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Add Batch</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label htmlFor=\"subject\">Select Subject:</label>\r\n        <select id=\"subject\" value={selectedSubject} onChange={handleSubjectChange}>\r\n          <option value=\"\">Select</option>\r\n          {subjects.map(subject => (\r\n            <option key={subject} value={subject}>{subject}</option>\r\n          ))}\r\n        </select>\r\n        <br />\r\n        <label>Selected Subject: {selectedSubject}</label>\r\n        <br />\r\n        <label>Batch ID: {batchID}</label>\r\n        <br />\r\n        <label>Enroll Students:</label>\r\n        {students.map(student => (\r\n          <div key={student.id}>\r\n            <input\r\n              type=\"checkbox\"\r\n              id={student.id}\r\n              checked={selectedStudents.includes(student.id)}\r\n              onChange={() => handleCheckboxChange(student.id)}\r\n            />\r\n            <label htmlFor={student.id}>{student.name}</label>\r\n          </div>\r\n        ))}\r\n        <br />\r\n        <button type=\"submit\" disabled={!selectedSubject || selectedStudents.length === 0}>Add Batch</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BatchManager;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}