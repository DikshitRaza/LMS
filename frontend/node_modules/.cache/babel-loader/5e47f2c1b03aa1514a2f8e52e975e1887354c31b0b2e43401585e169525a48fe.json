{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\LMS\\\\frontend\\\\src\\\\routes.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Dashboard from \"views/Dashboard.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst getUserType = async () => {\n  const userEmail = sessionStorage.getItem('email');\n  try {\n    const response = await fetch(\"http://localhost:8000/api/userType?email=\".concat(userEmail));\n    const data = await response.json();\n    return data.userType;\n  } catch (error) {\n    console.error('Error fetching user type:', error);\n    return null;\n  }\n};\nconst Routes = () => {\n  _s();\n  const [userType, setUserType] = useState('');\n  useEffect(() => {\n    const fetchUserType = async () => {\n      const type = await getUserType();\n      setUserType(type);\n    };\n    fetchUserType();\n  }, []);\n  const routes = [{\n    path: \"/dashboard\",\n    name: \"Dashboard\",\n    icon: \"nc-icon nc-chart-bar-32\",\n    component: /*#__PURE__*/_jsxDEV(Dashboard, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 18\n    }, this),\n    layout: \"/admin\"\n  }\n  // Add other routes as needed\n  ];\n\n  // Conditionally include components based on user's type\n  if (userType === 'student') {\n    routes.push({\n      path: \"/Liveclass\",\n      name: \"My Classes\",\n      icon: \"nc-icon nc-time-alarm\",\n      component: /*#__PURE__*/_jsxDEV(Liveclass, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 18\n      }, this),\n      layout: \"/admin\"\n    });\n  } else if (userType === 'admin') {\n    routes.push({\n      path: \"/upgrade\",\n      name: \"Manage Certification\",\n      icon: \"nc-icon nc-trophy\",\n      component: /*#__PURE__*/_jsxDEV(UpgradeToPro, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 18\n      }, this),\n      layout: \"/admin\"\n    });\n  }\n  return routes;\n};\n_s(Routes, \"kBbCzzYXN5wTMKcjt8pH8vOKc1k=\");\n_c = Routes;\nexport default Routes;\nvar _c;\n$RefreshReg$(_c, \"Routes\");","map":{"version":3,"names":["React","useState","useEffect","Dashboard","jsxDEV","_jsxDEV","getUserType","userEmail","sessionStorage","getItem","response","fetch","concat","data","json","userType","error","console","Routes","_s","setUserType","fetchUserType","type","routes","path","name","icon","component","fileName","_jsxFileName","lineNumber","columnNumber","layout","push","Liveclass","UpgradeToPro","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/LMS/frontend/src/routes.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport Dashboard from \"views/Dashboard.js\";\r\nconst getUserType = async () => {\r\n  const userEmail = sessionStorage.getItem('email');\r\n  try {\r\n    const response = await fetch(`http://localhost:8000/api/userType?email=${userEmail}`);\r\n    const data = await response.json();\r\n    return data.userType;\r\n  } catch (error) {\r\n    console.error('Error fetching user type:', error);\r\n    return null;\r\n  }\r\n};\r\n\r\nconst Routes = () => {\r\n  const [userType, setUserType] = useState('');\r\n\r\n  useEffect(() => {\r\n    const fetchUserType = async () => {\r\n      const type = await getUserType();\r\n      setUserType(type);\r\n    };\r\n\r\n    fetchUserType();\r\n  }, []);\r\n\r\n  const routes = [\r\n    {\r\n      path: \"/dashboard\",\r\n      name: \"Dashboard\",\r\n      icon: \"nc-icon nc-chart-bar-32\",\r\n      component: <Dashboard />,\r\n      layout: \"/admin\",\r\n    },\r\n    // Add other routes as needed\r\n  ];\r\n\r\n  // Conditionally include components based on user's type\r\n  if (userType === 'student') {\r\n    routes.push({\r\n      path: \"/Liveclass\",\r\n      name: \"My Classes\",\r\n      icon: \"nc-icon nc-time-alarm\",\r\n      component: <Liveclass />,\r\n      layout: \"/admin\",\r\n    });\r\n  } else if (userType === 'admin') {\r\n    routes.push({\r\n      path: \"/upgrade\",\r\n      name: \"Manage Certification\",\r\n      icon: \"nc-icon nc-trophy\",\r\n      component: <UpgradeToPro />,\r\n      layout: \"/admin\",\r\n    });\r\n  }\r\n\r\n  return routes;\r\n};\r\n\r\nexport default Routes;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAC3C,MAAMC,WAAW,GAAG,MAAAA,CAAA,KAAY;EAC9B,MAAMC,SAAS,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;EACjD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,6CAAAC,MAAA,CAA6CL,SAAS,CAAE,CAAC;IACrF,MAAMM,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,OAAOD,IAAI,CAACE,QAAQ;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,OAAO,IAAI;EACb;AACF,CAAC;AAED,MAAME,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACJ,QAAQ,EAAEK,WAAW,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd,MAAMmB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAMC,IAAI,GAAG,MAAMhB,WAAW,CAAC,CAAC;MAChCc,WAAW,CAACE,IAAI,CAAC;IACnB,CAAC;IAEDD,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAME,MAAM,GAAG,CACb;IACEC,IAAI,EAAE,YAAY;IAClBC,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE,yBAAyB;IAC/BC,SAAS,eAAEtB,OAAA,CAACF,SAAS;MAAAyB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IACxBC,MAAM,EAAE;EACV;EACA;EAAA,CACD;;EAED;EACA,IAAIjB,QAAQ,KAAK,SAAS,EAAE;IAC1BQ,MAAM,CAACU,IAAI,CAAC;MACVT,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,YAAY;MAClBC,IAAI,EAAE,uBAAuB;MAC7BC,SAAS,eAAEtB,OAAA,CAAC6B,SAAS;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MACxBC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC,MAAM,IAAIjB,QAAQ,KAAK,OAAO,EAAE;IAC/BQ,MAAM,CAACU,IAAI,CAAC;MACVT,IAAI,EAAE,UAAU;MAChBC,IAAI,EAAE,sBAAsB;MAC5BC,IAAI,EAAE,mBAAmB;MACzBC,SAAS,eAAEtB,OAAA,CAAC8B,YAAY;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MAC3BC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ;EAEA,OAAOT,MAAM;AACf,CAAC;AAACJ,EAAA,CA3CID,MAAM;AAAAkB,EAAA,GAANlB,MAAM;AA6CZ,eAAeA,MAAM;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}